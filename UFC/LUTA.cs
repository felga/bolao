//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace UFC
{
    public partial class LUTA
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual int IDLUTADOR1
        {
            get { return _iDLUTADOR1; }
            set
            {
                if (_iDLUTADOR1 != value)
                {
                    if (LUTADOR != null && LUTADOR.ID != value)
                    {
                        LUTADOR = null;
                    }
                    _iDLUTADOR1 = value;
                }
            }
        }
        private int _iDLUTADOR1;
    
        public virtual int IDLUTADOR2
        {
            get { return _iDLUTADOR2; }
            set
            {
                if (_iDLUTADOR2 != value)
                {
                    if (LUTADOR1 != null && LUTADOR1.ID != value)
                    {
                        LUTADOR1 = null;
                    }
                    _iDLUTADOR2 = value;
                }
            }
        }
        private int _iDLUTADOR2;
    
        public virtual int IDEVENTO
        {
            get { return _iDEVENTO; }
            set
            {
                if (_iDEVENTO != value)
                {
                    if (EVENTO != null && EVENTO.ID != value)
                    {
                        EVENTO = null;
                    }
                    _iDEVENTO = value;
                }
            }
        }
        private int _iDEVENTO;
    
        public virtual short ROUNDS
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<APOSTA> APOSTA
        {
            get
            {
                if (_aPOSTA == null)
                {
                    var newCollection = new FixupCollection<APOSTA>();
                    newCollection.CollectionChanged += FixupAPOSTA;
                    _aPOSTA = newCollection;
                }
                return _aPOSTA;
            }
            set
            {
                if (!ReferenceEquals(_aPOSTA, value))
                {
                    var previousValue = _aPOSTA as FixupCollection<APOSTA>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAPOSTA;
                    }
                    _aPOSTA = value;
                    var newValue = value as FixupCollection<APOSTA>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAPOSTA;
                    }
                }
            }
        }
        private ICollection<APOSTA> _aPOSTA;
    
        public virtual EVENTO EVENTO
        {
            get { return _eVENTO; }
            set
            {
                if (!ReferenceEquals(_eVENTO, value))
                {
                    var previousValue = _eVENTO;
                    _eVENTO = value;
                    FixupEVENTO(previousValue);
                }
            }
        }
        private EVENTO _eVENTO;
    
        public virtual LUTADOR LUTADOR
        {
            get { return _lUTADOR; }
            set
            {
                if (!ReferenceEquals(_lUTADOR, value))
                {
                    var previousValue = _lUTADOR;
                    _lUTADOR = value;
                    FixupLUTADOR(previousValue);
                }
            }
        }
        private LUTADOR _lUTADOR;
    
        public virtual LUTADOR LUTADOR1
        {
            get { return _lUTADOR1; }
            set
            {
                if (!ReferenceEquals(_lUTADOR1, value))
                {
                    var previousValue = _lUTADOR1;
                    _lUTADOR1 = value;
                    FixupLUTADOR1(previousValue);
                }
            }
        }
        private LUTADOR _lUTADOR1;

        #endregion
        #region Association Fixup
    
        private void FixupEVENTO(EVENTO previousValue)
        {
            if (previousValue != null && previousValue.LUTA.Contains(this))
            {
                previousValue.LUTA.Remove(this);
            }
    
            if (EVENTO != null)
            {
                if (!EVENTO.LUTA.Contains(this))
                {
                    EVENTO.LUTA.Add(this);
                }
                if (IDEVENTO != EVENTO.ID)
                {
                    IDEVENTO = EVENTO.ID;
                }
            }
        }
    
        private void FixupLUTADOR(LUTADOR previousValue)
        {
            if (previousValue != null && previousValue.LUTA.Contains(this))
            {
                previousValue.LUTA.Remove(this);
            }
    
            if (LUTADOR != null)
            {
                if (!LUTADOR.LUTA.Contains(this))
                {
                    LUTADOR.LUTA.Add(this);
                }
                if (IDLUTADOR1 != LUTADOR.ID)
                {
                    IDLUTADOR1 = LUTADOR.ID;
                }
            }
        }
    
        private void FixupLUTADOR1(LUTADOR previousValue)
        {
            if (previousValue != null && previousValue.LUTA1.Contains(this))
            {
                previousValue.LUTA1.Remove(this);
            }
    
            if (LUTADOR1 != null)
            {
                if (!LUTADOR1.LUTA1.Contains(this))
                {
                    LUTADOR1.LUTA1.Add(this);
                }
                if (IDLUTADOR2 != LUTADOR1.ID)
                {
                    IDLUTADOR2 = LUTADOR1.ID;
                }
            }
        }
    
        private void FixupAPOSTA(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (APOSTA item in e.NewItems)
                {
                    item.LUTA = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (APOSTA item in e.OldItems)
                {
                    if (ReferenceEquals(item.LUTA, this))
                    {
                        item.LUTA = null;
                    }
                }
            }
        }

        #endregion
    }
}
