//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace UFC
{
    public partial class Usuario
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual string Nome
        {
            get;
            set;
        }
    
        public virtual string Login
        {
            get;
            set;
        }
    
        public virtual System.DateTime DataCadastro
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<APOSTA> APOSTA
        {
            get
            {
                if (_aPOSTA == null)
                {
                    var newCollection = new FixupCollection<APOSTA>();
                    newCollection.CollectionChanged += FixupAPOSTA;
                    _aPOSTA = newCollection;
                }
                return _aPOSTA;
            }
            set
            {
                if (!ReferenceEquals(_aPOSTA, value))
                {
                    var previousValue = _aPOSTA as FixupCollection<APOSTA>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAPOSTA;
                    }
                    _aPOSTA = value;
                    var newValue = value as FixupCollection<APOSTA>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAPOSTA;
                    }
                }
            }
        }
        private ICollection<APOSTA> _aPOSTA;
    
        public virtual ICollection<COMPROVANTE> COMPROVANTE
        {
            get
            {
                if (_cOMPROVANTE == null)
                {
                    var newCollection = new FixupCollection<COMPROVANTE>();
                    newCollection.CollectionChanged += FixupCOMPROVANTE;
                    _cOMPROVANTE = newCollection;
                }
                return _cOMPROVANTE;
            }
            set
            {
                if (!ReferenceEquals(_cOMPROVANTE, value))
                {
                    var previousValue = _cOMPROVANTE as FixupCollection<COMPROVANTE>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCOMPROVANTE;
                    }
                    _cOMPROVANTE = value;
                    var newValue = value as FixupCollection<COMPROVANTE>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCOMPROVANTE;
                    }
                }
            }
        }
        private ICollection<COMPROVANTE> _cOMPROVANTE;

        #endregion
        #region Association Fixup
    
        private void FixupAPOSTA(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (APOSTA item in e.NewItems)
                {
                    item.Usuario = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (APOSTA item in e.OldItems)
                {
                    if (ReferenceEquals(item.Usuario, this))
                    {
                        item.Usuario = null;
                    }
                }
            }
        }
    
        private void FixupCOMPROVANTE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (COMPROVANTE item in e.NewItems)
                {
                    item.Usuario = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (COMPROVANTE item in e.OldItems)
                {
                    if (ReferenceEquals(item.Usuario, this))
                    {
                        item.Usuario = null;
                    }
                }
            }
        }

        #endregion
    }
}
