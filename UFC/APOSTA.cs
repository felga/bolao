//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace UFC
{
    public partial class APOSTA
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual int IDLUTA
        {
            get { return _iDLUTA; }
            set
            {
                if (_iDLUTA != value)
                {
                    if (LUTA != null && LUTA.ID != value)
                    {
                        LUTA = null;
                    }
                    _iDLUTA = value;
                }
            }
        }
        private int _iDLUTA;
    
        public virtual short LUTADORVENCEDOR
        {
            get;
            set;
        }
    
        public virtual System.Guid IDUSUARIO
        {
            get { return _iDUSUARIO; }
            set
            {
                if (_iDUSUARIO != value)
                {
                    if (Usuario != null && Usuario.Id != value)
                    {
                        Usuario = null;
                    }
                    _iDUSUARIO = value;
                }
            }
        }
        private System.Guid _iDUSUARIO;
    
        public virtual int IDCOMPROVANTE
        {
            get { return _iDCOMPROVANTE; }
            set
            {
                if (_iDCOMPROVANTE != value)
                {
                    if (COMPROVANTE != null && COMPROVANTE.ID != value)
                    {
                        COMPROVANTE = null;
                    }
                    _iDCOMPROVANTE = value;
                }
            }
        }
        private int _iDCOMPROVANTE;
    
        public virtual short ROUND
        {
            get;
            set;
        }
    
        public virtual bool RESULTADO
        {
            get;
            set;
        }
    
        public virtual string MODO
        {
            get;
            set;
        }
    
        public virtual short PONTOS
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual COMPROVANTE COMPROVANTE
        {
            get { return _cOMPROVANTE; }
            set
            {
                if (!ReferenceEquals(_cOMPROVANTE, value))
                {
                    var previousValue = _cOMPROVANTE;
                    _cOMPROVANTE = value;
                    FixupCOMPROVANTE(previousValue);
                }
            }
        }
        private COMPROVANTE _cOMPROVANTE;
    
        public virtual LUTA LUTA
        {
            get { return _lUTA; }
            set
            {
                if (!ReferenceEquals(_lUTA, value))
                {
                    var previousValue = _lUTA;
                    _lUTA = value;
                    FixupLUTA(previousValue);
                }
            }
        }
        private LUTA _lUTA;
    
        public virtual Usuario Usuario
        {
            get { return _usuario; }
            set
            {
                if (!ReferenceEquals(_usuario, value))
                {
                    var previousValue = _usuario;
                    _usuario = value;
                    FixupUsuario(previousValue);
                }
            }
        }
        private Usuario _usuario;

        #endregion
        #region Association Fixup
    
        private void FixupCOMPROVANTE(COMPROVANTE previousValue)
        {
            if (previousValue != null && previousValue.APOSTA.Contains(this))
            {
                previousValue.APOSTA.Remove(this);
            }
    
            if (COMPROVANTE != null)
            {
                if (!COMPROVANTE.APOSTA.Contains(this))
                {
                    COMPROVANTE.APOSTA.Add(this);
                }
                if (IDCOMPROVANTE != COMPROVANTE.ID)
                {
                    IDCOMPROVANTE = COMPROVANTE.ID;
                }
            }
        }
    
        private void FixupLUTA(LUTA previousValue)
        {
            if (previousValue != null && previousValue.APOSTA.Contains(this))
            {
                previousValue.APOSTA.Remove(this);
            }
    
            if (LUTA != null)
            {
                if (!LUTA.APOSTA.Contains(this))
                {
                    LUTA.APOSTA.Add(this);
                }
                if (IDLUTA != LUTA.ID)
                {
                    IDLUTA = LUTA.ID;
                }
            }
        }
    
        private void FixupUsuario(Usuario previousValue)
        {
            if (previousValue != null && previousValue.APOSTA.Contains(this))
            {
                previousValue.APOSTA.Remove(this);
            }
    
            if (Usuario != null)
            {
                if (!Usuario.APOSTA.Contains(this))
                {
                    Usuario.APOSTA.Add(this);
                }
                if (IDUSUARIO != Usuario.Id)
                {
                    IDUSUARIO = Usuario.Id;
                }
            }
        }

        #endregion
    }
}
